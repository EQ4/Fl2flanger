/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
Fl2flangerAudioProcessorEditor::Fl2flangerAudioProcessorEditor (Fl2flangerAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter)
{
    
    addAndMakeVisible(delaySlider);
    delaySlider.setLookAndFeel(&customLookAndFeel);
    delaySlider.setSliderStyle(Slider::RotaryVerticalDrag);
    delaySlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    delaySlider.setRange(0, 1, 0.01);
    delaySlider.setBounds(15, 142, 100, 100);
    delaySlider.setSkewFactor(0.5);
    delaySlider.addListener(this);
    delaySlider.addMouseListener(this, false);
    
    addAndMakeVisible(depthSlider);
    depthSlider.setLookAndFeel(&customLookAndFeel);
    depthSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    depthSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    depthSlider.setRange(0, 1, 0.01);
    depthSlider.setBounds(132, 142, 100, 100);
    depthSlider.setSkewFactor(0.5);
    depthSlider.addListener(this);
    
    addAndMakeVisible(rateSlider);
    rateSlider.setLookAndFeel(&customLookAndFeel);
    rateSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    rateSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    rateSlider.setRange(0, 1, 0.01);
    rateSlider.setBounds(251, 142, 100, 100);
    rateSlider.setSkewFactor(0.5);
    rateSlider.addListener(this);
    
    addAndMakeVisible(regenSlider);
    regenSlider.setLookAndFeel(&customLookAndFeel);
    regenSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    regenSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    regenSlider.setRange(0, 1, 0.01);
    regenSlider.setBounds(370, 142, 100, 100);
    regenSlider.addListener(this);
    
    addAndMakeVisible(mixSlider);
    mixSlider.setLookAndFeel(&customLookAndFeel);
    mixSlider.setSliderStyle(Slider::RotaryVerticalDrag);
    mixSlider.setTextBoxStyle(Slider::TextEntryBoxPosition::NoTextBox, true, 0, 0);
    mixSlider.setRange(0, 1, 0.01);
    mixSlider.setBounds(489, 142, 100, 100);
    mixSlider.addListener(this);
    
    GetProcessor()->addChangeListener(this);
    delaySlider.setValue(GetProcessor()->getParameter(GetProcessor()->delayParam), dontSendNotification);
    depthSlider.setValue(GetProcessor()->getParameter(GetProcessor()->depthParam), dontSendNotification);
    rateSlider.setValue(GetProcessor()->getParameter(GetProcessor()->rateParam), dontSendNotification);
    regenSlider.setValue(GetProcessor()->getParameter(GetProcessor()->regenParam), dontSendNotification);
    mixSlider.setValue(GetProcessor()->getParameter(GetProcessor()->mixParam), dontSendNotification);
    
    // This is where our plugin's editor size is set.
    setSize (600, 300);
}

Fl2flangerAudioProcessorEditor::~Fl2flangerAudioProcessorEditor()
{
    GetProcessor()->removeAllChangeListeners();
}

//==============================================================================
void Fl2flangerAudioProcessorEditor::paint (Graphics& g)
{
    Image bg = ImageCache::getFromMemory(BinaryData::background_png, BinaryData::background_pngSize);
    g.drawImage(bg, 0, 0, 600, 300, 0, 0, 600, 300);
}

void Fl2flangerAudioProcessorEditor::changeListenerCallback(ChangeBroadcaster* source)
{
    if (source == GetProcessor()) {
        delaySlider.setValue(GetProcessor()->getParameter(GetProcessor()->delayParam), dontSendNotification);
        depthSlider.setValue(GetProcessor()->getParameter(GetProcessor()->depthParam), dontSendNotification);
        rateSlider.setValue(GetProcessor()->getParameter(GetProcessor()->rateParam), dontSendNotification);
        regenSlider.setValue(GetProcessor()->getParameter(GetProcessor()->regenParam), dontSendNotification);
        mixSlider.setValue(GetProcessor()->getParameter(GetProcessor()->mixParam), dontSendNotification);
    }
}

void Fl2flangerAudioProcessorEditor::sliderValueChanged(Slider* slider)
{
    
    if (slider == &delaySlider) {
        GetProcessor()->setParameterNotifyingHost(GetProcessor()->delayParam, delaySlider.getValue());
    }
    if (slider == &depthSlider) {
        GetProcessor()->setParameterNotifyingHost(GetProcessor()->depthParam, depthSlider.getValue());
    }
    if (slider == &rateSlider) {
        GetProcessor()->setParameterNotifyingHost(GetProcessor()->rateParam, rateSlider.getValue());
    }
    if (slider == &regenSlider) {
        GetProcessor()->setParameterNotifyingHost(GetProcessor()->regenParam, regenSlider.getValue());
    }
    if (slider == &mixSlider) {
        GetProcessor()->setParameterNotifyingHost(GetProcessor()->mixParam, mixSlider.getValue());
    }
}

void Fl2flangerAudioProcessorEditor::mouseDown(const MouseEvent &event)
{
    if (delaySlider.isMouseButtonDown()) {
        GetProcessor()->beginParameterChangeGesture(GetProcessor()->delayParam);
    }
    if (depthSlider.isMouseButtonDown()) {
        GetProcessor()->beginParameterChangeGesture(GetProcessor()->depthParam);
    }
    if (rateSlider.isMouseButtonDown()) {
        GetProcessor()->beginParameterChangeGesture(GetProcessor()->rateParam);
    }
    if (regenSlider.isMouseButtonDown()) {
        GetProcessor()->beginParameterChangeGesture(GetProcessor()->regenParam);
    }
    if (rateSlider.isMouseButtonDown()) {
        GetProcessor()->beginParameterChangeGesture(GetProcessor()->rateParam);
    }
}

void Fl2flangerAudioProcessorEditor::mouseUp(const MouseEvent &event)
{
    if (!delaySlider.isMouseButtonDown()) {
        GetProcessor()->endParameterChangeGesture(GetProcessor()->delayParam);
    }
    if (!depthSlider.isMouseButtonDown()) {
        GetProcessor()->endParameterChangeGesture(GetProcessor()->depthParam);
    }
    if (!rateSlider.isMouseButtonDown()) {
        GetProcessor()->endParameterChangeGesture(GetProcessor()->rateParam);
    }
    if (!regenSlider.isMouseButtonDown()) {
        GetProcessor()->endParameterChangeGesture(GetProcessor()->regenParam);
    }
    if (!rateSlider.isMouseButtonDown()) {
        GetProcessor()->endParameterChangeGesture(GetProcessor()->rateParam);
    }
}
